<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="252" passed="252">
  <reporter-output>
  </reporter-output>
  <suite name="Surefire suite" duration-ms="5811" started-at="2024-04-22T09:34:06Z" finished-at="2024-04-22T09:34:11Z">
    <groups>
    </groups>
    <test name="Surefire test" duration-ms="5811" started-at="2024-04-22T09:34:06Z" finished-at="2024-04-22T09:34:11Z">
      <class name="com.github.vitalibo.brickgame.game.tanks.BattlefieldTest">
        <test-method status="PASS" signature="testCanDoDown()[pri:0, instance:com.github.vitalibo.brickgame.game.tanks.BattlefieldTest@4bee09]" name="testCanDoDown" duration-ms="5" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCanDoDown -->
        <test-method status="PASS" signature="testCanDoLeft()[pri:0, instance:com.github.vitalibo.brickgame.game.tanks.BattlefieldTest@4bee09]" name="testCanDoLeft" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCanDoLeft -->
        <test-method status="PASS" signature="testCanDoRight()[pri:0, instance:com.github.vitalibo.brickgame.game.tanks.BattlefieldTest@4bee09]" name="testCanDoRight" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCanDoRight -->
        <test-method status="PASS" signature="testCanDoUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tanks.BattlefieldTest@4bee09]" name="testCanDoUp" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCanDoUp -->
      </class> <!-- com.github.vitalibo.brickgame.game.tanks.BattlefieldTest -->
      <class name="com.github.vitalibo.brickgame.core.ControllerTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@2a079c]" name="setUp" is-config="true" duration-ms="2674" started-at="2024-04-22T11:34:06Z" finished-at="2024-04-22T11:34:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testChangePause()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@2a079c]" name="testChangePause" duration-ms="11" started-at="2024-04-22T11:34:08Z" finished-at="2024-04-22T11:34:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testChangePause -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@2a079c]" name="setUp" is-config="true" duration-ms="3" started-at="2024-04-22T11:34:08Z" finished-at="2024-04-22T11:34:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testChangeSound()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@2a079c]" name="testChangeSound" duration-ms="0" started-at="2024-04-22T11:34:08Z" finished-at="2024-04-22T11:34:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testChangeSound -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@2a079c]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:08Z" finished-at="2024-04-22T11:34:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDelegateKeyPressed(int, java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@2a079c]" name="testDelegateKeyPressed" duration-ms="1" started-at="2024-04-22T11:34:08Z" data-provider="actions" finished-at="2024-04-22T11:34:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[38]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda$12/2651029@1980a3f]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDelegateKeyPressed -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@2a079c]" name="setUp" is-config="true" duration-ms="3" started-at="2024-04-22T11:34:08Z" finished-at="2024-04-22T11:34:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDelegateKeyPressed(int, java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@2a079c]" name="testDelegateKeyPressed" duration-ms="0" started-at="2024-04-22T11:34:08Z" data-provider="actions" finished-at="2024-04-22T11:34:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[40]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda$13/22696332@138856f]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDelegateKeyPressed -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@2a079c]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:08Z" finished-at="2024-04-22T11:34:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDelegateKeyPressed(int, java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@2a079c]" name="testDelegateKeyPressed" duration-ms="0" started-at="2024-04-22T11:34:08Z" data-provider="actions" finished-at="2024-04-22T11:34:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[37]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda$14/16351670@1fae028]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDelegateKeyPressed -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@2a079c]" name="setUp" is-config="true" duration-ms="2" started-at="2024-04-22T11:34:08Z" finished-at="2024-04-22T11:34:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDelegateKeyPressed(int, java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@2a079c]" name="testDelegateKeyPressed" duration-ms="2" started-at="2024-04-22T11:34:08Z" data-provider="actions" finished-at="2024-04-22T11:34:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[39]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda$15/4894200@d52be7]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDelegateKeyPressed -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@2a079c]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:08Z" finished-at="2024-04-22T11:34:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDelegateKeyPressed(int, java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@2a079c]" name="testDelegateKeyPressed" duration-ms="1" started-at="2024-04-22T11:34:08Z" data-provider="actions" finished-at="2024-04-22T11:34:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[32]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda$16/29345279@aeaf29]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDelegateKeyPressed -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@2a079c]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:08Z" finished-at="2024-04-22T11:34:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@2a079c]" name="setUp" is-config="true" duration-ms="4" started-at="2024-04-22T11:34:08Z" finished-at="2024-04-22T11:34:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testNotDelegateKeyPressed(int, java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@2a079c]" name="testNotDelegateKeyPressed" duration-ms="0" started-at="2024-04-22T11:34:08Z" data-provider="actions" finished-at="2024-04-22T11:34:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[38]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda$12/2651029@1980a3f]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotDelegateKeyPressed -->
        <test-method status="PASS" signature="testNotDelegateKeyPressed(int, java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@2a079c]" name="testNotDelegateKeyPressed" duration-ms="1" started-at="2024-04-22T11:34:08Z" data-provider="actions" finished-at="2024-04-22T11:34:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[40]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda$13/22696332@138856f]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotDelegateKeyPressed -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@2a079c]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:08Z" finished-at="2024-04-22T11:34:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testNotDelegateKeyPressed(int, java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@2a079c]" name="testNotDelegateKeyPressed" duration-ms="0" started-at="2024-04-22T11:34:08Z" data-provider="actions" finished-at="2024-04-22T11:34:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[37]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda$14/16351670@1fae028]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotDelegateKeyPressed -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@2a079c]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:08Z" finished-at="2024-04-22T11:34:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testNotDelegateKeyPressed(int, java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@2a079c]" name="testNotDelegateKeyPressed" duration-ms="1" started-at="2024-04-22T11:34:08Z" data-provider="actions" finished-at="2024-04-22T11:34:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[39]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda$15/4894200@d52be7]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotDelegateKeyPressed -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@2a079c]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:08Z" finished-at="2024-04-22T11:34:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testNotDelegateKeyPressed(int, java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@2a079c]" name="testNotDelegateKeyPressed" duration-ms="1" started-at="2024-04-22T11:34:08Z" data-provider="actions" finished-at="2024-04-22T11:34:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[32]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda$16/29345279@aeaf29]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotDelegateKeyPressed -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@2a079c]" name="setUp" is-config="true" duration-ms="2" started-at="2024-04-22T11:34:08Z" finished-at="2024-04-22T11:34:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testReset()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@2a079c]" name="testReset" duration-ms="26" started-at="2024-04-22T11:34:08Z" finished-at="2024-04-22T11:34:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReset -->
      </class> <!-- com.github.vitalibo.brickgame.core.ControllerTest -->
      <class name="com.github.vitalibo.brickgame.core.KernelTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.KernelTest@18067a5]" name="setUp" is-config="true" duration-ms="8" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testJob()[pri:0, instance:com.github.vitalibo.brickgame.core.KernelTest@18067a5]" name="testJob" duration-ms="118" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJob -->
      </class> <!-- com.github.vitalibo.brickgame.core.KernelTest -->
      <class name="com.github.vitalibo.brickgame.core.ui.BrickTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickTest@4f30ec]" name="setUp" is-config="true" duration-ms="668" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickTest@4f30ec]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testNotRepaint()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickTest@4f30ec]" name="testNotRepaint" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotRepaint -->
        <test-method status="PASS" signature="testPaintState(boolean, java.awt.Color)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickTest@4f30ec]" name="testPaintState" duration-ms="51" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[java.awt.Color[r=97,g=112,b=91]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintState -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickTest@4f30ec]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testPaintState(boolean, java.awt.Color)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickTest@4f30ec]" name="testPaintState" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[java.awt.Color[r=0,g=0,b=0]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintState -->
        <test-method status="PASS" signature="testRepaint()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickTest@4f30ec]" name="testRepaint" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickTest@4f30ec]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
      </class> <!-- com.github.vitalibo.brickgame.core.ui.BrickTest -->
      <class name="com.github.vitalibo.brickgame.core.CountdownJobTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.CountdownJobTest@17cd7a0]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:08Z" finished-at="2024-04-22T11:34:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testCountdown()[pri:0, instance:com.github.vitalibo.brickgame.core.CountdownJobTest@17cd7a0]" name="testCountdown" duration-ms="1006" started-at="2024-04-22T11:34:08Z" finished-at="2024-04-22T11:34:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCountdown -->
      </class> <!-- com.github.vitalibo.brickgame.core.CountdownJobTest -->
      <class name="com.github.vitalibo.brickgame.game.snake.MouseTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="setUp" is-config="true" duration-ms="2" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testEatMouse()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="testEatMouse" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEatMouse -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="testNextPoint" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="generator" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=11, x=0)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="testNextPoint" duration-ms="3" started-at="2024-04-22T11:34:11Z" data-provider="generator" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=5, x=5)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method status="PASS" signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="testNextPoint" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="generator" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=12, x=0)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="testNextPoint" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="generator" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=19, x=4)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method status="PASS" signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="testNextPoint" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="generator" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=13, x=7)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="testNextPoint" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="generator" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=17, x=2)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="testNextPoint" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="generator" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=10, x=1)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method status="PASS" signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="testNextPoint" duration-ms="2" started-at="2024-04-22T11:34:11Z" data-provider="generator" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=11, x=3)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method status="PASS" signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="testNextPoint" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="generator" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=3, x=1)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="testNextPoint" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="generator" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=19, x=3)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="testNextPoint" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="generator" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=1, x=2)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="testNextPoint" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="generator" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=2, x=1)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="testNextPoint" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="generator" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=12, x=4)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="testNextPoint" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="generator" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=9, x=8)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="testNextPoint" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="generator" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=1, x=7)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method status="PASS" signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="testNextPoint" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="generator" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=0, x=2)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="testNextPoint" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="generator" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=5, x=0)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="testNextPoint" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="generator" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=11, x=1)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="testNextPoint" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="generator" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=9, x=9)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method status="PASS" signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="testNextPoint" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="generator" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=17, x=9)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testStream()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@25b2fe]" name="testStream" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStream -->
      </class> <!-- com.github.vitalibo.brickgame.game.snake.MouseTest -->
      <class name="com.github.vitalibo.brickgame.core.JobTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.JobTest@1ef45e3]" name="setUp" is-config="true" duration-ms="58" started-at="2024-04-22T11:34:09Z" finished-at="2024-04-22T11:34:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testKill()[pri:0, instance:com.github.vitalibo.brickgame.core.JobTest@1ef45e3]" name="testKill" duration-ms="62" started-at="2024-04-22T11:34:09Z" finished-at="2024-04-22T11:34:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testKill -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.JobTest@1ef45e3]" name="setUp" is-config="true" duration-ms="62" started-at="2024-04-22T11:34:09Z" finished-at="2024-04-22T11:34:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testPause()[pri:0, instance:com.github.vitalibo.brickgame.core.JobTest@1ef45e3]" name="testPause" duration-ms="126" started-at="2024-04-22T11:34:09Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPause -->
      </class> <!-- com.github.vitalibo.brickgame.core.JobTest -->
      <class name="com.github.vitalibo.brickgame.game.tanks.DirectionTest">
        <test-method status="PASS" signature="testDown()[pri:0, instance:com.github.vitalibo.brickgame.game.tanks.DirectionTest@bf9759]" name="testDown" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDown -->
        <test-method status="PASS" signature="testLeft()[pri:0, instance:com.github.vitalibo.brickgame.game.tanks.DirectionTest@bf9759]" name="testLeft" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLeft -->
        <test-method status="PASS" signature="testUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tanks.DirectionTest@bf9759]" name="testUp" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUp -->
        <test-method status="PASS" signature="testRight()[pri:0, instance:com.github.vitalibo.brickgame.game.tanks.DirectionTest@bf9759]" name="testRight" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRight -->
      </class> <!-- com.github.vitalibo.brickgame.game.tanks.DirectionTest -->
      <class name="com.github.vitalibo.brickgame.game.race.CarTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@19963d8]" name="setUp" is-config="true" duration-ms="2" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testCarCrashed()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@19963d8]" name="testCarCrashed" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[car crashed]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: car crashed, point=Point(y=4, x=5))
	at com.github.vitalibo.brickgame.game.race.Car.verifyCrash(Car.java:68)
	at com.github.vitalibo.brickgame.game.race.CarTest.testCarCrashed(CarTest.java:59)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCarCrashed -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@19963d8]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDown()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@19963d8]" name="testDown" duration-ms="2" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDown -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@19963d8]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@19963d8]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testLeft()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@19963d8]" name="testLeft" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLeft -->
        <test-method status="PASS" signature="testRight()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@19963d8]" name="testRight" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRight -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@19963d8]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testVerifyPassed()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@19963d8]" name="testVerifyPassed" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyPassed -->
      </class> <!-- com.github.vitalibo.brickgame.game.race.CarTest -->
      <class name="com.github.vitalibo.brickgame.core.ui.BrickPanelTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="64" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testBrickSize()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testBrickSize" duration-ms="7" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBrickSize -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="5" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="19" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="2" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="2" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="4" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="2" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="2" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="2" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="2" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="2" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="3" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="2" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="4" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="2" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="4" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="7" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="2" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="3" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="2" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="3" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="2" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="3" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="2" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="5" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="8" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="3" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="3" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="2" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="2" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="2" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="3" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="2" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="2" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="7" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="2" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="2" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@ebc39e]" name="testDraw" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
      </class> <!-- com.github.vitalibo.brickgame.core.ui.BrickPanelTest -->
      <class name="com.github.vitalibo.brickgame.core.ui.IconPanelTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.IconPanelTest@bbfa04]" name="setUp" is-config="true" duration-ms="9" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testNotRepaint(boolean)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.IconPanelTest@bbfa04]" name="testNotRepaint" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotRepaint -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.IconPanelTest@bbfa04]" name="setUp" is-config="true" duration-ms="6" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testNotRepaint(boolean)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.IconPanelTest@bbfa04]" name="testNotRepaint" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotRepaint -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.IconPanelTest@bbfa04]" name="setUp" is-config="true" duration-ms="5" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.IconPanelTest@bbfa04]" name="setUp" is-config="true" duration-ms="7" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testRepaint(boolean)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.IconPanelTest@bbfa04]" name="testRepaint" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method status="PASS" signature="testRepaint(boolean)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.IconPanelTest@bbfa04]" name="testRepaint" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
      </class> <!-- com.github.vitalibo.brickgame.core.ui.IconPanelTest -->
      <class name="com.github.vitalibo.brickgame.game.shoot.ArmyTest">
        <test-method status="PASS" signature="testHasNotWin()[pri:0, instance:com.github.vitalibo.brickgame.game.shoot.ArmyTest@17d0008]" name="testHasNotWin" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHasNotWin -->
        <test-method status="PASS" signature="testHasWin()[pri:0, instance:com.github.vitalibo.brickgame.game.shoot.ArmyTest@17d0008]" name="testHasWin" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHasWin -->
        <test-method status="PASS" signature="testMakeAttack()[pri:0, instance:com.github.vitalibo.brickgame.game.shoot.ArmyTest@17d0008]" name="testMakeAttack" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMakeAttack -->
        <test-method status="PASS" signature="testKillEnemy()[pri:0, instance:com.github.vitalibo.brickgame.game.shoot.ArmyTest@17d0008]" name="testKillEnemy" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testKillEnemy -->
      </class> <!-- com.github.vitalibo.brickgame.game.shoot.ArmyTest -->
      <class name="com.github.vitalibo.brickgame.game.tetris.BoardTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@16c48ac]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testAdd()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@16c48ac]" name="testAdd" duration-ms="6" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAdd -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@16c48ac]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testCleanUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@16c48ac]" name="testCleanUp" duration-ms="3" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCleanUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@16c48ac]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testInit(int)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@16c48ac]" name="testInit" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="levels" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInit -->
        <test-method status="PASS" signature="testInit(int)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@16c48ac]" name="testInit" duration-ms="2" started-at="2024-04-22T11:34:11Z" data-provider="levels" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInit -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@16c48ac]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@16c48ac]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testInit(int)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@16c48ac]" name="testInit" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="levels" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[15]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInit -->
        <test-method status="PASS" signature="testInit(int)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@16c48ac]" name="testInit" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="levels" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInit -->
        <test-method status="PASS" signature="testIsFull()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@16c48ac]" name="testIsFull" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsFull -->
        <test-method status="PASS" signature="testVerify()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@16c48ac]" name="testVerify" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerify -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@16c48ac]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@16c48ac]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@16c48ac]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
      </class> <!-- com.github.vitalibo.brickgame.game.tetris.BoardTest -->
      <class name="com.github.vitalibo.brickgame.util.CanvasTranslatorTest">
        <test-method status="PASS" signature="testFrom()[pri:0, instance:com.github.vitalibo.brickgame.util.CanvasTranslatorTest@9838eb]" name="testFrom" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFrom -->
        <test-method status="PASS" signature="testFromStream(int, int)[pri:0, instance:com.github.vitalibo.brickgame.util.CanvasTranslatorTest@9838eb]" name="testFromStream" duration-ms="2" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFromStream -->
        <test-method status="PASS" signature="testFromStream(int, int)[pri:0, instance:com.github.vitalibo.brickgame.util.CanvasTranslatorTest@9838eb]" name="testFromStream" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFromStream -->
        <test-method status="PASS" signature="testFromStream(int, int)[pri:0, instance:com.github.vitalibo.brickgame.util.CanvasTranslatorTest@9838eb]" name="testFromStream" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[19]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFromStream -->
      </class> <!-- com.github.vitalibo.brickgame.util.CanvasTranslatorTest -->
      <class name="com.github.vitalibo.brickgame.game.snake.DirectionTest">
        <test-method status="PASS" signature="testReverse(com.github.vitalibo.brickgame.game.snake.Direction, com.github.vitalibo.brickgame.game.snake.Direction)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.DirectionTest@67ae56]" name="testReverse" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[DOWN]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[UP]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReverse -->
        <test-method status="PASS" signature="testReverse(com.github.vitalibo.brickgame.game.snake.Direction, com.github.vitalibo.brickgame.game.snake.Direction)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.DirectionTest@67ae56]" name="testReverse" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[UP]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[DOWN]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReverse -->
        <test-method status="PASS" signature="testReverse(com.github.vitalibo.brickgame.game.snake.Direction, com.github.vitalibo.brickgame.game.snake.Direction)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.DirectionTest@67ae56]" name="testReverse" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[LEFT]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[RIGHT]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReverse -->
        <test-method status="PASS" signature="testReverse(com.github.vitalibo.brickgame.game.snake.Direction, com.github.vitalibo.brickgame.game.snake.Direction)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.DirectionTest@67ae56]" name="testReverse" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[RIGHT]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[LEFT]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReverse -->
        <test-method status="PASS" signature="testReverse(com.github.vitalibo.brickgame.game.snake.Direction, com.github.vitalibo.brickgame.game.snake.Direction)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.DirectionTest@67ae56]" name="testReverse" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[NOT_DEFINED]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[NOT_DEFINED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReverse -->
      </class> <!-- com.github.vitalibo.brickgame.game.snake.DirectionTest -->
      <class name="com.github.vitalibo.brickgame.game.snake.MapTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="setUp" is-config="true" duration-ms="4" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testCrashOnBorder(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="testCrashOnBorder" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="samplesCrashed" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[snake crash init map border]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: snake crash init map border, point=Point(y=0, x=0))
	at com.github.vitalibo.brickgame.game.snake.Map.verifyCrashOnBorder(Map.java:26)
	at com.github.vitalibo.brickgame.game.snake.MapTest.testCrashOnBorder(MapTest.java:63)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCrashOnBorder -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testCrashOnBorder(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="testCrashOnBorder" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samplesCrashed" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[snake crash init map border]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: snake crash init map border, point=Point(y=1, x=1))
	at com.github.vitalibo.brickgame.game.snake.Map.verifyCrashOnBorder(Map.java:26)
	at com.github.vitalibo.brickgame.game.snake.MapTest.testCrashOnBorder(MapTest.java:63)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCrashOnBorder -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testCrashOnBorder(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="testCrashOnBorder" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samplesCrashed" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[snake crash init map border]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: snake crash init map border, point=Point(y=0, x=2))
	at com.github.vitalibo.brickgame.game.snake.Map.verifyCrashOnBorder(Map.java:26)
	at com.github.vitalibo.brickgame.game.snake.MapTest.testCrashOnBorder(MapTest.java:63)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCrashOnBorder -->
        <test-method status="PASS" signature="testCrashOnBorder(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="testCrashOnBorder" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samplesCrashed" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[snake crash init map border]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: snake crash init map border, point=Point(y=2, x=0))
	at com.github.vitalibo.brickgame.game.snake.Map.verifyCrashOnBorder(Map.java:26)
	at com.github.vitalibo.brickgame.game.snake.MapTest.testCrashOnBorder(MapTest.java:63)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCrashOnBorder -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="testLoadingMap" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="levels" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="testLoadingMap" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="levels" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method status="PASS" signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="testLoadingMap" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="levels" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="testLoadingMap" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="levels" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="setUp" is-config="true" duration-ms="2" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="testLoadingMap" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="levels" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="testLoadingMap" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="levels" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="testLoadingMap" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="levels" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="testLoadingMap" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="levels" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="testLoadingMap" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="levels" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method status="PASS" signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="testLoadingMap" duration-ms="2" started-at="2024-04-22T11:34:11Z" data-provider="levels" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="testLoadingMap" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="levels" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="testLoadingMap" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="levels" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="testLoadingMap" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="levels" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[12]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="testLoadingMap" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="levels" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[13]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method status="PASS" signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="testLoadingMap" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="levels" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[14]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="testLoadingMap" duration-ms="2" started-at="2024-04-22T11:34:11Z" data-provider="levels" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[15]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testUnmodifiableList()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="testUnmodifiableList" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <exception class="java.lang.UnsupportedOperationException">
            <full-stacktrace>
              <![CDATA[java.lang.UnsupportedOperationException
	at java.util.Collections$UnmodifiableCollection.add(Collections.java:1057)
	at com.github.vitalibo.brickgame.game.snake.Map.add(Map.java:18)
	at com.github.vitalibo.brickgame.game.snake.MapTest.testUnmodifiableList(MapTest.java:37)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.UnsupportedOperationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUnmodifiableList -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testVerifyPassed(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="testVerifyPassed" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyPassed -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testVerifyPassed(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="testVerifyPassed" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyPassed -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testVerifyPassed(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="testVerifyPassed" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyPassed -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testVerifyPassed(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@11053e1]" name="testVerifyPassed" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyPassed -->
      </class> <!-- com.github.vitalibo.brickgame.game.snake.MapTest -->
      <class name="com.github.vitalibo.brickgame.core.ui.NumberPanelTest">
        <test-method status="PASS" signature="testDigitSequence(int, int, java.util.List)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.NumberPanelTest@1deb50e]" name="testDigitSequence" duration-ms="4" started-at="2024-04-22T11:34:11Z" data-provider="samplesDigitSequence" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDigitSequence -->
        <test-method status="PASS" signature="testOverflowValue(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.NumberPanelTest@1deb50e]" name="testOverflowValue" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samplesMaxValue" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOverflowValue -->
        <test-method status="PASS" signature="testDigitSequence(int, int, java.util.List)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.NumberPanelTest@1deb50e]" name="testDigitSequence" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samplesDigitSequence" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDigitSequence -->
        <test-method status="PASS" signature="testOverflowValue(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.NumberPanelTest@1deb50e]" name="testOverflowValue" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="samplesMaxValue" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOverflowValue -->
        <test-method status="PASS" signature="testDigitSequence(int, int, java.util.List)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.NumberPanelTest@1deb50e]" name="testDigitSequence" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samplesDigitSequence" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1234567890]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDigitSequence -->
        <test-method status="PASS" signature="testOverflowValue(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.NumberPanelTest@1deb50e]" name="testOverflowValue" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samplesMaxValue" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[999]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOverflowValue -->
        <test-method status="PASS" signature="testSetIllegalValue()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.NumberPanelTest@1deb50e]" name="testSetIllegalValue" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The value must be mere 0.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The value must be mere 0.
	at com.github.vitalibo.brickgame.core.ui.NumberPanel.set(NumberPanel.java:49)
	at com.github.vitalibo.brickgame.core.ui.NumberPanelTest.testSetIllegalValue(NumberPanelTest.java:42)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSetIllegalValue -->
        <test-method status="PASS" signature="testOverflowValue(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.NumberPanelTest@1deb50e]" name="testOverflowValue" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samplesMaxValue" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOverflowValue -->
      </class> <!-- com.github.vitalibo.brickgame.core.ui.NumberPanelTest -->
      <class name="com.github.vitalibo.brickgame.game.PointTest">
        <test-method status="PASS" signature="testMoveLeft(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@1341870]" name="testMoveLeft" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samplesMoveHorizontal" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMoveLeft -->
        <test-method status="PASS" signature="testMoveDown(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@1341870]" name="testMoveDown" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samplesMoveVertical" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[19]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[18]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMoveDown -->
        <test-method status="PASS" signature="testMoveDown(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@1341870]" name="testMoveDown" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samplesMoveVertical" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMoveDown -->
        <test-method status="PASS" signature="testMoveUp(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@1341870]" name="testMoveUp" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="samplesMoveVertical" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMoveUp -->
        <test-method status="PASS" signature="testMoveLeft(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@1341870]" name="testMoveLeft" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samplesMoveHorizontal" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMoveLeft -->
        <test-method status="PASS" signature="testMoveRight(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@1341870]" name="testMoveRight" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samplesMoveHorizontal" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMoveRight -->
        <test-method status="PASS" signature="testMoveRight(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@1341870]" name="testMoveRight" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samplesMoveHorizontal" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMoveRight -->
        <test-method status="PASS" signature="testMoveUp(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@1341870]" name="testMoveUp" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samplesMoveVertical" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[19]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[18]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMoveUp -->
        <test-method status="PASS" signature="testVerifyFailed(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@1341870]" name="testVerifyFailed" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samplesOutOfBounds" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[The X value must be in the range 0 - 9.]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: The X value must be in the range 0 - 9., point=Point(y=0, x=10))
	at com.github.vitalibo.brickgame.game.Point.verify(Point.java:54)
	at com.github.vitalibo.brickgame.game.PointTest.testVerifyFailed(PointTest.java:37)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyFailed -->
        <test-method status="PASS" signature="testVerifyPassed(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@1341870]" name="testVerifyPassed" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samplesInBounds" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[19]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyPassed -->
        <test-method status="PASS" signature="testVerifyFailed(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@1341870]" name="testVerifyFailed" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samplesOutOfBounds" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[The X value must be in the range 0 - 9.]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: The X value must be in the range 0 - 9., point=Point(y=0, x=-1))
	at com.github.vitalibo.brickgame.game.Point.verify(Point.java:54)
	at com.github.vitalibo.brickgame.game.PointTest.testVerifyFailed(PointTest.java:37)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyFailed -->
        <test-method status="PASS" signature="testVerifyFailed(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@1341870]" name="testVerifyFailed" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samplesOutOfBounds" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[The Y value must be in the range 0 - 19.]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: The Y value must be in the range 0 - 19., point=Point(y=20, x=0))
	at com.github.vitalibo.brickgame.game.Point.verify(Point.java:58)
	at com.github.vitalibo.brickgame.game.PointTest.testVerifyFailed(PointTest.java:37)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyFailed -->
        <test-method status="PASS" signature="testVerifyPassed(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@1341870]" name="testVerifyPassed" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samplesInBounds" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyPassed -->
        <test-method status="PASS" signature="testVerifyFailed(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@1341870]" name="testVerifyFailed" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samplesOutOfBounds" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[The Y value must be in the range 0 - 19.]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: The Y value must be in the range 0 - 19., point=Point(y=-1, x=0))
	at com.github.vitalibo.brickgame.game.Point.verify(Point.java:58)
	at com.github.vitalibo.brickgame.game.PointTest.testVerifyFailed(PointTest.java:37)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyFailed -->
      </class> <!-- com.github.vitalibo.brickgame.game.PointTest -->
      <class name="com.github.vitalibo.brickgame.game.ShapeTest">
        <test-method status="PASS" signature="testShapeEquals(com.github.vitalibo.brickgame.game.Shape, com.github.vitalibo.brickgame.game.Shape)[pri:0, instance:com.github.vitalibo.brickgame.game.ShapeTest@153f17c]" name="testShapeEquals" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.Shape@1d979c4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.Shape@b173db]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testShapeEquals -->
        <test-method status="PASS" signature="testShapeEquals(com.github.vitalibo.brickgame.game.Shape, com.github.vitalibo.brickgame.game.Shape)[pri:0, instance:com.github.vitalibo.brickgame.game.ShapeTest@153f17c]" name="testShapeEquals" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.Shape@1ec5e2a]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.Shape@290e63]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testShapeEquals -->
      </class> <!-- com.github.vitalibo.brickgame.game.ShapeTest -->
      <class name="com.github.vitalibo.brickgame.game.race.RoadTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.race.RoadTest@d62f43]" name="setUp" is-config="true" duration-ms="2" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDown()[pri:0, instance:com.github.vitalibo.brickgame.game.race.RoadTest@d62f43]" name="testDown" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDown -->
      </class> <!-- com.github.vitalibo.brickgame.game.race.RoadTest -->
      <class name="com.github.vitalibo.brickgame.util.BooleanCollectorTest">
        <test-method status="PASS" signature="testToTwoDimensionalArray()[pri:0, instance:com.github.vitalibo.brickgame.util.BooleanCollectorTest@14ba872]" name="testToTwoDimensionalArray" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testToTwoDimensionalArray -->
        <test-method status="PASS" signature="testToArray()[pri:0, instance:com.github.vitalibo.brickgame.util.BooleanCollectorTest@14ba872]" name="testToArray" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testToArray -->
      </class> <!-- com.github.vitalibo.brickgame.util.BooleanCollectorTest -->
      <class name="com.github.vitalibo.brickgame.game.LifeTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@dafa95]" name="setUp" is-config="true" duration-ms="8" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="cleanUp()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@dafa95]" name="cleanUp" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method status="PASS" signature="reset()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@dafa95]" name="reset" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" depends-on-methods="com.github.vitalibo.brickgame.game.LifeTest.setUp" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reset -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@dafa95]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="reset()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@dafa95]" name="reset" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" depends-on-methods="com.github.vitalibo.brickgame.game.LifeTest.setUp" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reset -->
        <test-method status="PASS" signature="testNotRepaint()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@dafa95]" name="testNotRepaint" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotRepaint -->
        <test-method status="PASS" signature="testRepaint(int, [[Z)[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@dafa95]" name="testRepaint" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[Z@1c7e828]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method status="PASS" signature="testRepaint(int, [[Z)[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@dafa95]" name="testRepaint" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[Z@1f8036d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method status="PASS" signature="reset()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@dafa95]" name="reset" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" depends-on-methods="com.github.vitalibo.brickgame.game.LifeTest.setUp" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reset -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@dafa95]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="reset()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@dafa95]" name="reset" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" depends-on-methods="com.github.vitalibo.brickgame.game.LifeTest.setUp" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reset -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@dafa95]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testRepaint(int, [[Z)[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@dafa95]" name="testRepaint" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[Z@1144d0e]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method status="PASS" signature="reset()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@dafa95]" name="reset" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" depends-on-methods="com.github.vitalibo.brickgame.game.LifeTest.setUp" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reset -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@dafa95]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testRepaint(int, [[Z)[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@dafa95]" name="testRepaint" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[Z@9f8160]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@dafa95]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="reset()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@dafa95]" name="reset" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" depends-on-methods="com.github.vitalibo.brickgame.game.LifeTest.setUp" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reset -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@dafa95]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="reset()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@dafa95]" name="reset" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" depends-on-methods="com.github.vitalibo.brickgame.game.LifeTest.setUp" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reset -->
        <test-method status="PASS" signature="testRepaint(int, [[Z)[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@dafa95]" name="testRepaint" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[16]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[Z@2f6681]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
      </class> <!-- com.github.vitalibo.brickgame.game.LifeTest -->
      <class name="com.github.vitalibo.brickgame.core.StateTest">
        <test-method status="PASS" signature="testChangeState(boolean)[pri:0, instance:com.github.vitalibo.brickgame.core.StateTest@1fa3a9d]" name="testChangeState" duration-ms="2" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testChangeState -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.StateTest@1fa3a9d]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.StateTest@1fa3a9d]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testChangeState(boolean)[pri:0, instance:com.github.vitalibo.brickgame.core.StateTest@1fa3a9d]" name="testChangeState" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testChangeState -->
      </class> <!-- com.github.vitalibo.brickgame.core.StateTest -->
      <class name="com.github.vitalibo.brickgame.game.snake.SnakeTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@ecd4b]" name="setUp" is-config="true" duration-ms="2" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testEatSelf(com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@ecd4b]" name="testEatSelf" duration-ms="2" started-at="2024-04-22T11:34:11Z" data-provider="samplesCrashed" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Point(y=0, x=0)]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[snake ate itself]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: snake ate itself, point=Point(y=0, x=0))
	at com.github.vitalibo.brickgame.game.snake.Snake.lambda$verifyEatSelf$0(Snake.java:33)
	at java.util.Optional.ifPresent(Optional.java:159)
	at com.github.vitalibo.brickgame.game.snake.Snake.verifyEatSelf(Snake.java:32)
	at com.github.vitalibo.brickgame.game.snake.SnakeTest.testEatSelf(SnakeTest.java:68)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEatSelf -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@ecd4b]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testHead()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@ecd4b]" name="testHead" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHead -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@ecd4b]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testEatSelf(com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@ecd4b]" name="testEatSelf" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samplesCrashed" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Point(y=0, x=1)]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[snake ate itself]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: snake ate itself, point=Point(y=0, x=1))
	at com.github.vitalibo.brickgame.game.snake.Snake.lambda$verifyEatSelf$0(Snake.java:33)
	at java.util.Optional.ifPresent(Optional.java:159)
	at com.github.vitalibo.brickgame.game.snake.Snake.verifyEatSelf(Snake.java:32)
	at com.github.vitalibo.brickgame.game.snake.SnakeTest.testEatSelf(SnakeTest.java:68)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEatSelf -->
        <test-method status="PASS" signature="testInit()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@ecd4b]" name="testInit" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInit -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@ecd4b]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@ecd4b]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testVerifyPassed(com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@ecd4b]" name="testVerifyPassed" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Point(y=0, x=2)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyPassed -->
        <test-method status="PASS" signature="testVerifyPassed(com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@ecd4b]" name="testVerifyPassed" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Point(y=5, x=5)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyPassed -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@ecd4b]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
      </class> <!-- com.github.vitalibo.brickgame.game.snake.SnakeTest -->
      <class name="com.github.vitalibo.brickgame.util.BuilderTest">
        <test-method status="PASS" signature="testMap()[pri:0, instance:com.github.vitalibo.brickgame.util.BuilderTest@1ec2012]" name="testMap" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMap -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.util.BuilderTest@1ec2012]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.util.BuilderTest@1ec2012]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testWith()[pri:0, instance:com.github.vitalibo.brickgame.util.BuilderTest@1ec2012]" name="testWith" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWith -->
      </class> <!-- com.github.vitalibo.brickgame.util.BuilderTest -->
      <class name="com.github.vitalibo.brickgame.core.NumberTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDec(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="testDec" duration-ms="4" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDec -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDec(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="testDec" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[101]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDec -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="setUp" is-config="true" duration-ms="3" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDec(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="testDec" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12346]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDec -->
        <test-method status="PASS" signature="testDecStep(int, int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="testDecStep" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samplesWithStep" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDecStep -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDecStep(int, int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="testDecStep" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samplesWithStep" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[12445]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDecStep -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDecStep(int, int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="testDecStep" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samplesWithStep" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[24690]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDecStep -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testDecStep(int, int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="testDecStep" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samplesWithStep" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[54321]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[66666]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDecStep -->
        <test-method status="PASS" signature="testInc(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="testInc" duration-ms="2" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInc -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testInc(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="testInc" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[101]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInc -->
        <test-method status="PASS" signature="testInc(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="testInc" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samples" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12346]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInc -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testIncStep(int, int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="testIncStep" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samplesWithStep" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIncStep -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testIncStep(int, int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="testIncStep" duration-ms="1" started-at="2024-04-22T11:34:10Z" data-provider="samplesWithStep" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[12445]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIncStep -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:10Z" finished-at="2024-04-22T11:34:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testIncStep(int, int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="testIncStep" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samplesWithStep" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[24690]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIncStep -->
        <test-method status="PASS" signature="testIncStep(int, int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@6ba0ac]" name="testIncStep" duration-ms="0" started-at="2024-04-22T11:34:10Z" data-provider="samplesWithStep" finished-at="2024-04-22T11:34:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[54321]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[66666]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIncStep -->
      </class> <!-- com.github.vitalibo.brickgame.core.NumberTest -->
      <class name="com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest">
        <test-method status="PASS" signature="testCreate(java.util.function.Function, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@1fffcd7]" name="testCreate" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="functions" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$186/31829334@18b56b]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.I]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreate -->
        <test-method status="PASS" signature="testCreate(java.util.function.Function, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@1fffcd7]" name="testCreate" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="functions" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$187/22409616@17ff5c4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.J]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreate -->
        <test-method status="PASS" signature="testCreate(java.util.function.Function, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@1fffcd7]" name="testCreate" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="functions" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$188/16487677@4ff64d]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.L]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreate -->
        <test-method status="PASS" signature="testCreate(java.util.function.Function, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@1fffcd7]" name="testCreate" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="functions" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$189/15456466@1777da7]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.O]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreate -->
        <test-method status="PASS" signature="testCreate(java.util.function.Function, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@1fffcd7]" name="testCreate" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="functions" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$191/6552177@69014e]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.T]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreate -->
        <test-method status="PASS" signature="testCreate(java.util.function.Function, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@1fffcd7]" name="testCreate" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="functions" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$190/10766852@5a706]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.S]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreate -->
        <test-method status="PASS" signature="testCreate(java.util.function.Function, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@1fffcd7]" name="testCreate" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="functions" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$192/7324092@3ac221]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.Z]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreate -->
        <test-method status="PASS" signature="testGenerate(java.util.function.Supplier, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@1fffcd7]" name="testGenerate" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="suppliers" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$195/14321735@e4db59]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.L]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerate -->
        <test-method status="PASS" signature="testGenerate(java.util.function.Supplier, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@1fffcd7]" name="testGenerate" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="suppliers" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$198/27733190@688978]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.T]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerate -->
        <test-method status="PASS" signature="testGenerate(java.util.function.Supplier, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@1fffcd7]" name="testGenerate" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="suppliers" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$194/7566114@14fc83f]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.J]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerate -->
        <test-method status="PASS" signature="testGenerate(java.util.function.Supplier, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@1fffcd7]" name="testGenerate" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="suppliers" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$196/19121036@a0d249]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.O]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerate -->
        <test-method status="PASS" signature="testGenerate(java.util.function.Supplier, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@1fffcd7]" name="testGenerate" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="suppliers" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$199/29165637@1f14e93]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.Z]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerate -->
        <test-method status="PASS" signature="testGenerate(java.util.function.Supplier, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@1fffcd7]" name="testGenerate" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="suppliers" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$193/14808060@ef885d]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.I]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerate -->
        <test-method status="PASS" signature="testGenerate(java.util.function.Supplier, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@1fffcd7]" name="testGenerate" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="suppliers" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$197/172039@6c84fa]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.S]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerate -->
      </class> <!-- com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest -->
      <class name="com.github.vitalibo.brickgame.core.ui.DigitTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="setUp" is-config="true" duration-ms="381" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testNotRepaint()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="testNotRepaint" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotRepaint -->
        <test-method status="PASS" signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="testPaintDigit" duration-ms="45" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="testPaintDigit" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method status="PASS" signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="testPaintDigit" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="testPaintDigit" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method status="PASS" signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="testPaintDigit" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="testPaintDigit" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="testPaintDigit" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="testPaintDigit" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method status="PASS" signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="testPaintDigit" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method status="PASS" signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="testRepaint" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method status="PASS" signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="testPaintDigit" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="setUp" is-config="true" duration-ms="1" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="testRepaint" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method status="PASS" signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="testRepaint" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method status="PASS" signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="testRepaint" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method status="PASS" signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="testRepaint" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="testRepaint" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="testRepaint" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method status="PASS" signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="testRepaint" duration-ms="1" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="testRepaint" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method status="PASS" signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="testRepaint" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samples" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method status="PASS" signature="testSetIllegalValue(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="testSetIllegalValue" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samplesIllegalValue" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The value must be in the range 0 - 9.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The value must be in the range 0 - 9.
	at com.github.vitalibo.brickgame.core.ui.NumberPanel$Digit.set(NumberPanel.java:83)
	at com.github.vitalibo.brickgame.core.ui.DigitTest.testSetIllegalValue(DigitTest.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSetIllegalValue -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testSetIllegalValue(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="testSetIllegalValue" duration-ms="0" started-at="2024-04-22T11:34:11Z" data-provider="samplesIllegalValue" finished-at="2024-04-22T11:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The value must be in the range 0 - 9.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The value must be in the range 0 - 9.
	at com.github.vitalibo.brickgame.core.ui.NumberPanel$Digit.set(NumberPanel.java:83)
	at com.github.vitalibo.brickgame.core.ui.DigitTest.testSetIllegalValue(DigitTest.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSetIllegalValue -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@100df86]" name="setUp" is-config="true" duration-ms="0" started-at="2024-04-22T11:34:11Z" finished-at="2024-04-22T11:34:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
      </class> <!-- com.github.vitalibo.brickgame.core.ui.DigitTest -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
